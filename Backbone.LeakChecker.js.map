{"version":3,"file":"Backbone.LeakChecker.min.js","sources":["Backbone.LeakChecker.js"],"names":["root","factory","exports","$","require","_","Backbone","module","define","amd","returnExportsGlobal","initLeakChecker","this","LeakChecker","options","initialize","intercept","fn","after","val","apply","arguments","leakChecker","View","prototype","_configure","register","remove","__gced","logger","trace","cid","unregister","__warnIfLeaky","__isLeaky","warn","el","__isOnScreen","debug","contains","document","start","DEFAULT_OPTIONS","interval","performGC","console","extend","constructor","sanitizeOptions","clear","defaultOptions","pick","_handle","setInterval","reportLeaks","bind","get","views","view","error","log","each","gc","stop","clearInterval","dispose"],"mappings":"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","sourcesContent":["/*globals define */\n\n(function(root, factory) {\n  'use strict';\n\n  if (typeof exports === 'object') {\n    // CommonJS\n    var $ = require('jquery');\n    var _ = require('underscore');\n    var Backbone = require('backbone');\n    module.exports = factory($, _, Backbone);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['jquery', 'underscore', 'backbone'], function($, _, Backbone) {\n      return (root.returnExportsGlobal = factory($, _, Backbone));\n    });\n  } else {\n    // Global Variables\n    root.initLeakChecker = factory(root.$, root._, root.Backbone);\n  }\n}(this, function($, _, Backbone) {\n  'use strict';\n\n  function LeakChecker(options) {\n    this.initialize(options);\n  }\n\n  LeakChecker.DEFAULT_OPTIONS = {\n    interval: 5000,\n    performGC: false,\n    logger: console\n  };\n\n  _.extend(LeakChecker.prototype, {\n\n    constructor: LeakChecker,\n\n    initialize: function(options) {\n      _.extend(this, this.sanitizeOptions(options));\n      this.interval = 5000;\n      this.clear();\n      this.logger.warn('**** Backbone.LeakChecker - Your best pal for backbone view memory leak detection. ****');\n    },\n\n    sanitizeOptions: function(options) {\n      var defaultOptions = LeakChecker.DEFAULT_OPTIONS;\n      options = _.pick(options || {}, 'interval', 'performGC', 'logger');\n      return _.extend({}, defaultOptions, options);\n    },\n\n    start: function() {\n      this._handle = setInterval(this.reportLeaks.bind(this), this.interval);\n    },\n\n    get: function(cid) {\n      return this.views[cid];\n    },\n\n    register: function(view) {\n      if (this.views[view.cid]) {\n        this.logger.error('View' + view.cid + 'is already registered!');\n        return;\n      }\n\n      this.views[view.cid] = view;\n    },\n\n    unregister: function(view) {\n      if (!this.views[view.cid]) {\n        this.logger.error('View' + view.cid + 'is not registered!');\n        return;\n      }\n\n      delete this.views[view.cid];\n    },\n\n    reportLeaks: function() {\n      this.logger.log('checking leaky views');\n      _.each(this.views, function(view) {\n        view.__warnIfLeaky();\n      });\n\n      if (this.performGC) {\n        this.gc();\n      }\n    },\n\n    clear: function() {\n      this.views = {};\n    },\n\n    stop: function() {\n      clearInterval(this._handle);\n    },\n\n    gc: function() {\n      _.each(this.views, function(view) {\n        if (view.__isLeaky()) {\n          view.remove();\n        }\n      });\n    },\n\n    dispose: function() {\n      this.stop();\n      this.clear();\n    }\n  });\n\n  function intercept(fn, after) {\n    return function() {\n      var val = fn.apply(this, arguments);\n      after.apply(this);\n      return val;\n    };\n  }\n\n  var leakChecker;\n\n  function initLeakChecker(options) {\n    if (leakChecker) {\n      return leakChecker;\n    }\n\n    leakChecker = new LeakChecker(options);\n\n    // instrument Backbone.View#_configure\n    // since we cannot override the constructor itself\n    // the #_configure method invoked by the constructor is our next best choice\n    Backbone.View.prototype._configure = intercept(\n      Backbone.View.prototype._configure,\n      function() {\n        leakChecker.register(this);\n      }\n    );\n\n    Backbone.View.prototype.remove = intercept(\n      Backbone.View.prototype.remove,\n      function() {\n        this.__gced = true;\n        leakChecker.logger.trace('[' + this.cid + '] removed.', this);\n        leakChecker.unregister(this);\n      });\n\n    Backbone.View.prototype.__warnIfLeaky = function() {\n      if (this.__isLeaky()) {\n        leakChecker.logger.warn('[' + this.cid + '] is leaky.', this.el, this);\n      }\n\n      if (this.__isOnScreen()) {\n        leakChecker.logger.debug('[' + this.cid + '] still on screen.', this.el, this);\n      }\n    };\n\n    Backbone.View.prototype.__isOnScreen = function() {\n      return $.contains(document, this.el);\n    };\n\n    Backbone.View.prototype.__isLeaky = function() {\n      // GC'ed already\n      if (this.__gced) {\n        return false;\n      }\n\n      // not GC'ed, but still attached to DOM\n      if (this.__isOnScreen()) {\n        return false;\n      }\n\n      // not GC'ed and not on DOM\n      // we think this might be a leaky view\n      return true;\n    };\n\n    leakChecker.start();\n  }\n\n  return initLeakChecker;\n}));\n"]}